import Head from "next/head";
import { useCallback, useEffect, useState } from "react";

import Grid from "@components/algorithms/Grid/Grid";
import {
  algorithmOptions,
  Pathfinding,
  pathfindingAlgorithms,
} from "@utils/pathfinding";
import { useWindowSize } from "@utils/hooks";
import { Button, buttonColor, buttonType } from "@components/common";
import { DropdownList } from "@components/common/DropdownList";
import { algoConfigButtonDivId, algoPage, algoPageTitleId } from "./constants";

const gridWrapperId = "grid-wrapper";

const AlgorithmHome = () => {
  const { width, height } = useWindowSize();
  const [rowSize, setRowSize] = useState(0);
  const [colSize, setColSize] = useState(0);
  const [algorithm, setAlgorithm] = useState<Pathfinding>("BFS");
  const [algorithmExecuted, setAlgorithmExecuted] = useState(false);
  const [clearExecuted, setClearExecuted] = useState(false);
  const [unmarkExecuted, setUnmarkExecuted] = useState(false);

  const onStartClick = useCallback(() => {
    if (!algorithmExecuted) {
      setAlgorithmExecuted(!algorithmExecuted);
    }
  }, [algorithmExecuted]);

  const onClearClick = useCallback(() => {
    if (!clearExecuted) {
      setClearExecuted(!clearExecuted);
    }
  }, [clearExecuted]);

  const onChangeAlgorithm = useCallback(
    (value: Pathfinding) => {
      setAlgorithm(value);
      if (!unmarkExecuted) {
        setUnmarkExecuted(!unmarkExecuted);
      }
    },
    [unmarkExecuted, setUnmarkExecuted]
  );

  useEffect(() => {
    if (width && height) {
      const d = document;
      const titleElement = d.getElementById(algoPageTitleId);
      const configButtonElement = d.getElementById(algoConfigButtonDivId);
      const topHeight =
        (titleElement?.clientHeight || 0) +
        (configButtonElement?.clientHeight || 0);
      const topWidth = titleElement?.clientWidth || 0;

      const pagePadding = 16;
      const gridHeight = height - topHeight - pagePadding * 2;
      const gridWidth = topWidth;
      const colSize = gridWidth / 30;
      const rowSize = gridHeight / 30;
      setColSize(Math.floor(colSize) - Number(colSize % 1 <= 0.4));
      setRowSize(Math.floor(rowSize) - Number(rowSize % 1 <= 0.4));
    }
  }, [width, height]);

  return (
    <>
      <Head>
        <title>Algorithm | Pathfinding</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div id={algoPage} style={{ padding: 16 }}>
        <h2 id={algoPageTitleId}>Pathfinding</h2>
        <div id={algoConfigButtonDivId} style={{ display: "flex" }}>
          <Button
            onClick={onStartClick}
            type={buttonType.FLAT}
            colorType={buttonColor.PINK}
            margin={"8px 0"}
          >
            {"Start"}
          </Button>
          <Button
            onClick={onClearClick}
            type={buttonType.FLAT}
            colorType={buttonColor.NAVY}
            margin={"8px 0 8px 8px"}
            fontWeight={400}
          >
            {"Clear Blocks"}
          </Button>
          <DropdownList
            title={"Algorithm:"}
            value={algorithm}
            items={algorithmOptions}
            disabled={algorithmExecuted}
            optionHandler={onChangeAlgorithm}
          />
        </div>
        <div
          id={gridWrapperId}
          style={{ display: "flex", justifyContent: "center" }}
        >
          <Grid
            rowSize={rowSize}
            colSize={colSize}
            pathfindingAlgorithm={pathfindingAlgorithms[algorithm]}
            algorithmExecuted={algorithmExecuted}
            setAlgorithmExecuted={setAlgorithmExecuted}
            clearExecuted={clearExecuted}
            setClearExecuted={setClearExecuted}
            unmarkExecuted={unmarkExecuted}
            setUnmarkExecuted={setUnmarkExecuted}
          />
        </div>
      </div>
    </>
  );
};

export default AlgorithmHome;
